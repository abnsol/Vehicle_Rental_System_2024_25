// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement()) // Unique identifier for each user.
  email     String   @unique // Ensures the email is unique.
  // phone     String   @unique // Ensures the phone number is unique.
  password  String // Hashed password stored securely.
  role      String   @default("USER") // Defaults to "USER". Other option: "ADMIN".
  status    String   @default("ACTIVE") // "ACTIVE" or "INACTIVE" (for soft delete).
  createdAt DateTime @default(now()) // Automatically stores the record creation timestamp.
  updatedAt DateTime @updatedAt // Automatically updates on every update operation.
  firstName String // required first name
  lastName  String? // Optional last name

  // Relationships
  bookings    Booking[] // A user can have multiple bookings.
  rentHistory RentHistory[] // A user can have multiple completed rentals.
}

model Vehicle {
  id              Int       @id @default(autoincrement()) // Unique identifier for each vehicle.
  model           String // Vehicle model name.
  brand           String // Vehicle brand.
  group           String // Category (SUV, Economy, etc.).
  available       Boolean   @default(true) // Indicates if the vehicle is available for booking.
  price           Float // Rental price per day.
  madeIn          String? // Country of manufacture.
  status          String    @default("ACTIVE") // "BOOKED","ARCHIVED/DELETED", "DAMAGED"
  manufactured    DateTime? // Date when the vehicle was manufactured.
  color           String? // Vehicle color.
  seatingCapacity Int? // Number of seats in the vehicle.
  images          String? // List of image URLs for the vehicle.
  lastCheck       DateTime? // Last maintenance check date (optional).
  createdAt       DateTime  @default(now()) // Creation timestamp.
  updatedAt       DateTime  @updatedAt // Update timestam

  // Relationships
  bookings         Booking[]      // A vehicle can have multiple bookings.
  rentHistory      RentHistory[]  // A vehicle can have multiple completed rentals.
}

model Booking {
  id         Int      @id @default(autoincrement()) // Unique booking ID.
  startDate  DateTime // Start date of the booking.
  endDate    DateTime // End date of the booking.
  status     String   @default("PENDING") // Status: "PENDING", "CONFIRMED", or "COMPLETED".
  totalPrice Float // Total price for the booking.
  createdAt  DateTime @default(now()) // Booking creation timestamp.
  updatedAt  DateTime @updatedAt // Automatically updates on update operations.

  // Foreign Keys
  userId    Int
  vehicleId Int

  // Relationships
  user    User    @relation(fields: [userId], references: [id])
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
}

model RentHistory {
  id        Int      @id @default(autoincrement()) // Unique ID for each rental history entry.
  startDate DateTime // Start date of the rental.
  endDate   DateTime // End date of the rental.
  createdAt DateTime @default(now()) // Timestamp for when the rental record was created.

  // Foreign Keys
  userId    Int
  vehicleId Int

  // Relationships
  user    User    @relation(fields: [userId], references: [id])
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
}
